#lang sicp
;; helpers
(define (average x y) (/ (+ x y) 2))

(define (display-stream s)
  (stream-for-each display-line s))

(define (display-line x) (newline) (display x))

(define (prime? n)
  (let loop ((d 2))
    (cond ((< n (* d d)) #t)
          ((zero? (modulo n d)) #f)
          (else (loop (+ d 1))))))
(define (square x) (* x x))
;; selectors for streams
(define (stream-cdr stream) (force (cdr stream)))
(define (stream-car stream) (car stream))
(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))))
;; memoize?
(define (memo-proc proc)
  (let ((already-run? false) (result false))
    (lambda ()
      (if (not already-run?)
          (begin (set! result (proc))
                 (set! already-run? true)
                 result)
          result))))


;;(define (cons-stream a b) (cons a (delay b)))
;; Stream utilities
;; enumerate
(define (stream-enumerate-interval low high)
  ;; if done return empty stream
  (if (> low high)
      the-empty-stream
      ;; else cons-stream low and
      (cons-stream
       low
       ;; rest of the stream
       (stream-enumerate-interval (+ low 1) high))))
;; (stream-enumerate-interval 1 4)



(define (stream-filter pred stream)
  (cond ((stream-null? stream) the-empty-stream)
        ((pred (stream-car stream))
         (cons-stream (stream-car stream)
                      (stream-filter
                       pred
                       (stream-cdr stream))))
        (else (stream-filter pred (stream-cdr stream)))))


(define (stream-map proc . argstreams)
  (if (stream-null? (car argstreams))
      the-empty-stream
      (cons-stream
       (apply proc (map stream-car argstreams))
       (apply stream-map
              (cons proc (map stream-cdr argstreams))))))


(define (stream-for-each proc s)
  (if (stream-null? s)
      'done
      (begin (proc (stream-car s))
             (stream-for-each proc (stream-cdr s)))))






;; (partial-sums integers)
;; (add-streams integers (cons-stream 0 (partial-sums integers)))
;; (add-streams integers (cons-stream 0 (delay (partial-sums integers))))
;; (
;;===============================================================
(define (integers-starting-from n)
  (cons-stream n (integers-starting-from (+ n 1))))

;;(stream-ref (integers-starting-from 1) 10)
(define integers (integers-starting-from 1))

(define (divisible? x y) (= (remainder x y) 0))

(define no-sevens
  (stream-filter (lambda (x) (not (divisible? x 7))) integers))

(define sf (cons-stream 7 (stream-filter (lambda (x) (not (divisible? x 5))) no-sevens)))
(define (fibgen a b) (cons-stream a (fibgen b (+ a b))))

;; (define fibs (fibgen 0 1))
;;==========================================================



;;
;; (stream-ref (mul-series integers no-sevens) 0)
;; (stream-ref (mul-series integers no-sevens) 1)
;; (stream-ref (mul-series integers no-sevens) 2)
;; (stream-ref (mul-series integers no-sevens) 3)
;; (stream-ref (mul-series integers no-sevens) 4)
;;

(define (stream-take s n)
  (cond ((zero? n) '())
        (else (cons (stream-car s) (stream-take (stream-cdr s) (- n 1))))))


(define (sieve stream)
  (cons-stream
   (stream-car stream)
   ;; filtere tek seferde werdimiz streamin hepsini filtrelemis oluo
   ;; werilen predicate icin
   ;; AT THIS PART WE FILTER REST OF THE STREAM THAT DIVISIBLE BY X
   ;; THE NEW STREAM GIVEN TO SIEVE IS ALL STREAM WITHOUT FILTERED ONES
   ;; DO THIS FOR EACH ELEMENT
   (sieve (stream-filter
           ;; burasi icerisinde yapiyor sanirim filteri her
           ;; element icin ?? IDK
           (lambda (x)
             (not (divisible? x (stream-car stream))))
           ;; laa bu direkt eliyo hepsini ab00
           ;;
           (stream-cdr stream)))))

(define primes (sieve (integers-starting-from 2)))
;; x defined 22 times?
;; 5th prime is 2 3  5 7 13
;; (2 3 4 5 6 7 8 9 10 11 12 13)
;; (2 3 5 7 9 11 13)
;; (2 3 5 7 11 13)
;; (2 3 5 7 11 13)
;; (2 3 5 7 11 13)
;; (2 3 5 7 11 13)
;; (define (stream-ref s n)
;;   (if (= n 0)
;;       (stream-car s)
;;       (stream-ref (stream-cdr s) (- n 1))))
;; stream = (1 2 3 4 5 6 7 8)
;; (cons-stream 1 (sieve (stream-filter
;;                         (lambda (x)
;;                           (not (divisible? x (stream-car stream)))
;;                         (stream-cdr stream)))))


;; (cons-stream 1



(define (add-streams s1 s2) (stream-map + s1 s2))

(define ones (cons-stream 1 ones))
(define twos (cons-stream 2 twos))



(define integerss
  (cons-stream 1 (add-streams ones integerss)))

(define fibs
  (cons-stream
   0
   (cons-stream 1 (add-streams (stream-cdr fibs) fibs))))


;;      1  1  2  3  5  8  13  21  ... = (stream-cdr fibs)
;;      0  1  1  2  3  5  8   13  ... = fibs
;;0  1  1  2  3  5  8  13 21  34  ... = fibs

(define (partial-sums s)
  ;; add stream s to newlyt constructed s??
  (add-streams s (cons-stream 0 (partial-sums s))))
;; (add-streams integers (cons-stream 0 (add-streams

(define (scale-stream stream factor)
  (stream-map (lambda (x) (* x factor)) stream))

(define (reciprocal-series s)
  (cons-stream 1 (scale-stream (mul-series (stream-cdr s) (reciprocal-series s)) -1)))



(define s (cons-stream 1 (add-streams s s)))




(define (merge s1 s2)
  (cond ((stream-null? s1) s2)
        ((stream-null? s2 ) s1)
        (else
         (let ((s1car (stream-car s1))
               (s2car (stream-car s2)))
           (cond ((< s1car s2car)
                  (cons-stream s1car
                               (merge (stream-cdr s1) s2)))
                 ((> s1car s2car)
                  (cons-stream
                   s2car
                   (merge s1 (stream-cdr s2))))
                 (else
                  (cons-stream
                   s1car
                   (merge (stream-cdr s1)
                          (stream-cdr s2)))))))))



(define S (cons-stream 1 (merge (merge (scale-stream S 2)
                                       (scale-stream S 3))
                                (scale-stream S 5))))



;; a)
(define (integrate-series stream)
  (stream-map / stream integers))
;; b)
(define cosine-series
  (cons-stream 1 (stream-map - (integrate-series sine-series))))
(define sine-series
  (cons-stream 0 (integrate-series cosine-series)))


;; (define (mul-series s1 s2)
;;   (cons-stream (* (stream-car s1) (stream-car s2))
;;                (add-streams (scale-stream (stream-cdr s2) (stream-car s1))
;;                             (mul-series (stream-cdr s1) s2))))
(define (mul-series s1 s2)
  (cons-stream
   (* (stream-car s1) (stream-car s2))
   (add-streams (add-streams (scale-stream (stream-cdr s1) (stream-car s2)
                                           (scale-stream (stream-cdr s2) (stream-car s1)))
                             (cons-stream 0 (mul-series (stream-cdr s1) (stream-cdr s2)))))))


(define (sqrt-improve guess x)
  (average guess (/ x guess)))

(define (sqrt-stream x)
  (define guesses
    (cons-stream 1.0
                 (stream-map (lambda (guess) (sqrt-improve guess x))
                             guesses)))
  guesses)

;; (stream-take (sqrt-stream 2) 10)


(define (pi-summands n)
  (cons-stream (/ 1.0 n)
               (stream-map - (pi-summands (+ n 2)))))


(define pi-stream
  (scale-stream (partial-sums (pi-summands 1)) 4))

(stream-take pi-stream 20)

(define (euler-transform s)
  (let ((s0 (stream-ref s 0))
        (s1 (stream-ref s 1))
        (s2 (stream-ref s 2)))
    (cons-stream (- s2 (/ (square (- s2 s1))
                          (+ s0 (* -2 s1) s2)))
                 (euler-transform (stream-cdr s)))))

;; (stream-take (euler-transform pi-stream) 15)

(define (make-tableau transform s)
  (cons-stream s (make-tableau transform (transform s))))

(define (accelerated-sequence transform s)
  (stream-map stream-car (make-tableau transform s)))

;; (stream-take (accelerated-sequence euler-transform pi-stream) 20)


;; (define (stream-limit stream tolerance)
;;         (if (< (abs (- (stream-ref stream 1) (stream-ref stream 0))) tolerance)
;;                 (stream-ref stream 1)
;;                 (stream-limit (stream-cdr stream) tolerance)))


;; (define (ln2-summands n)
;;         (cons-stream (/ 1.0 n) 
;;                      (stream-map - (ln2-summands (+ n 1)))))
;; (define ln2-stream
;;         (partial-sums (ln2-summands 1)))

