#lang scheme
(define (sqrt-iter guess x)
  (if (good-enough? guess x) guess (sqrt-iter (improve guess x) x)))

(define (improve guess x)
  (average guess (/ x guess)))

(define (average x y)
  (/ (+ x y) 2))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.0001))

(define (square x)
  (* x x))

(define (sqrt x)
  (sqrt-iter 1.0 x))

(define (new-if predicate then-clause else-clause)
  (cond
    [predicate then-clause]
    [else else-clause]))
;; that new if causes infinite loop bec unlike 'if', 'new-if' is a function
;; and it evaluates its inside
;; (define (sqr-iter guess x)
;;   (new-if (good-enough? guess x) guess (sqr-iter (improve guess x) x)))
;; (sqr-iter 1 3)

(define (sqrt_1 x)
  (define (good-enough? guess x)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess x)
    (average guess (/ x guess)))
  (define (sqrt-iter guess x)
    (if (good-enough? guess x) guess (sqrt-iter (improve guess x) x)))
  (sqrt-iter 1.0 x))

(define (sqrt_2 x)
  (define (good-enough? guess)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess) guess (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))

;; (define (factorial n)
;;   (if (= n 1)
;;       1
;;       (* n (factorial (- n 1)))))

;; (factorial 6)
;; (* 6 (factorial 5))
;; (* 6 (* 5 (factorial 4)))
;; (* 6 (* 5 (* 4 (factorial 3))))
;; (* 6 (* 5 (* 4 (* 3 (factorial 2)))))
;; (* 6 (* 5 (* 4 (* 3 (* 2 (factorial 1))))))
;; (* 6 (* 5 (* 4 (* 3 (* 2 1)))))
;; (* 6 (* 5 (* 4 (* 3 2))))
;; (* 6 (* 5 (* 4 6)))
;; (* 6 (* 5 24))
;; (* 6 120)
;; 720

;; linear iterative proces for computing 6!
(define (factorial n) (fact-iter 1 1 n))
(define (fact-iter product counter max-count)
  (if (> counter max-count)
      product
      (fact-iter
       (* counter product )
       (+ counter 1 )
       max-count)))


;; (factorial 6)
;; (fact-iter 1 1 6)
;; (fact-iter 1 2 6)
;; (fact-iter 2 3 6)
;; (fact-iter 6 4 6)
;; (fact-iter 24 5 6)
;; (fact-iter 120 6 6)
;; (fact-iter 720 7 6)
;; 720

(define (scoped_factorial n )
  (define (iter product counter)
    (if (> counter n )
        product
        (iter (* counter product)
              (+ counter 1 ))))
  (iter 1 1))

(define (+ a b)
  (if (= a 0) b (inc (+ (dec a) b))))
